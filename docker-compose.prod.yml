version: '3.8'

services:
  easygroup-app:
    build: .
    container_name: easygroup-app
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=${DB_HOST:-easygroup-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-easygroup}
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION_MS=${JWT_EXPIRATION_MS:-86400000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_URLS=${CORS_URLS:-http://localhost:5173,http://localhost:8080}
    restart: always
    networks:
      - nw_caddy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  easygroup-db:
    image: postgres:14-alpine
    container_name: postgres-prod
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-easygroup}
    volumes:
      - postgres-data-prod:/var/lib/postgresql/data
    networks:
      - spring-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  nw_caddy:
    external: true

volumes:
  postgres-data-prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/postgres-prod
